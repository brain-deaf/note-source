/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_526ED7A9__
#define __PLUGINPROCESSOR_H_526ED7A9__

#include "../JuceLibraryCode/JuceHeader.h"
#include "Sampler.h"



//==============================================================================
/**
    As the name suggest, this class does the actual audio processing.
*/

class MidiDeviceCallback;

class SamplerProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    SamplerProcessor();
    ~SamplerProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages) override;
    void reset() override;

    //==============================================================================
    bool hasEditor() const override                  { return true; }
    AudioProcessorEditor* createEditor() override;

    //==============================================================================
    const String getName() const override            { return "My Plugin"; }

    int getNumParameters() override;
    float getParameter (int index) override;
    float getParameterDefaultValue (int index) override;
    void setParameter (int index, float newValue) override;
    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override                                               { return 1; }
    int getCurrentProgram() override                                            { return 0; }
    void setCurrentProgram (int /*index*/) override                             {}
    const String getProgramName (int /*index*/) override                        { return "Default"; }
    void changeProgramName (int /*index*/, const String& /*newName*/) override  {}

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    //==============================================================================
    // These properties are public so that our editor component can access them
    // A bit of a hacky way to do it, but it's only a demo! Obviously in your own
    // code you'll do this much more neatly..

    // this is kept up to date with the midi messages that arrive, and the UI component
    // registers with it so it can represent the incoming messages

    // this keeps a copy of the last set of time info that was acquired during an audio
    // callback - the UI component will read this and display it.
    AudioPlayHead::CurrentPositionInfo lastPosInfo;

    // these are used to persist the UI's size - the values are stored along with the
    // filter's other parameters, and the UI component will update them when it gets
    // resized.
    int lastUIWidth, lastUIHeight;

    //==============================================================================
    enum Parameters
    {
        gainParam = 0,
        delayParam,

        totalNumParams
    };

    float gain, delay;

	bool addSample(String path, int root_note, int note_low, int note_high,
		Array<int>&, PlaySettings*, std::pair<int, int>, RoundRobinPlayback*, int i=-1);

	void setMidiChannel(int i){ midi_input_id = i; }
	void setFxSelector(FxSelector* f){ fx_selector = f; }
	void setTransformSelector(TransformSelector* f){ tf_selector = f; }
	void setupRendering();
	void setSamplerProcessor(SamplerEventProcessor* s){ samplerProcessor = s; }
	SamplerEventProcessor* getSamplerProcessor(){ return samplerProcessor; }
	FxSelector* getFxSelector(){ return fx_selector; }
	TransformSelector* getTransformSelector(){ return tf_selector; }
	IIR_Filter* getFilter(){ return &filter1; }

	Synthesiser* getSynth(){ return &synth; }
	MidiMessageCollector& getMidiCollector(){ return midiCollector; }
	Array<std::shared_ptr<NoteEvent> >& getEvents(){ return events; }
	Array<std::shared_ptr<NoteEvent> >& getIncomingEvents(){ return incomingEvents; }
	std::shared_ptr<NoteEvent> getLastEvent(){ return events[events.size() - 1]; }
	SelectedItemSet<std::pair<int, int> >* getNotesHeld(){ return notesHeld; }
	int getIdCount(){ return idCount; }
	void incIdCount(){ idCount++; }
	void incWavSampleCount(){ wavSampleCount++; }
	void setWavSampleCount(){ wavSampleCount = 0; }
	long long getWavSampleCount(){ return wavSampleCount; }
	AudioFormatWriter* getWavWriter(){ return wavWriter; }
	float getPeak(){ return peak; }
	void setInstrumentVolume(double d){ instrumentVolume = d; }
	double getInstrumentVolume(){ return instrumentVolume; }
	OwnedArray<SampleGroup>& getGroups(){ return groups; }
	void setNotesHeld(SelectedItemSet<std::pair<int, int> >* s){ notesHeld = s; }
	void setMidiCallback(MidiDeviceCallback* m){ midiCallback = m; }
	MidiBuffer& getMidiBuffer(){ return midiBuffer; }
private:
    //==============================================================================
	SamplerEventProcessor* samplerProcessor;
	MidiMessageCollector midiCollector;
	Synthesiser synth;
	AudioFormatManager formatManager;
	int midi_input_id;
	IIR_Filter filter1;
	IIR_Filter filter2;
	FxSelector* fx_selector;
	TransformSelector* tf_selector;
	Array<std::shared_ptr<NoteEvent> > events;
	Array<std::shared_ptr<NoteEvent> > incomingEvents;
	SelectedItemSet<std::pair<int, int> >* notesHeld;
	int idCount;
	WavAudioFormat* wavFormat;
	FileOutputStream* wavOutput;
	AudioFormatWriter* wavWriter;
	MidiDeviceCallback* midiCallback;
	long long wavSampleCount;
	float peak;
	double instrumentVolume;
	OwnedArray<SampleGroup> groups;
	MidiBuffer midiBuffer;
	MidiBuffer tfMidiBuffer;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SamplerProcessor)
};

#endif  // __PLUGINPROCESSOR_H_526ED7A9__
